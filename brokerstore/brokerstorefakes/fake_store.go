// This file was generated by counterfeiter
package brokerstorefakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/cloudfoundry-incubator/service-broker-store/brokerstore"
	"github.com/pivotal-cf/brokerapi"
)

type FakeStore struct {
	RetrieveInstanceDetailsStub        func(id string) (brokerstore.ServiceInstance, error)
	retrieveInstanceDetailsMutex       sync.RWMutex
	retrieveInstanceDetailsArgsForCall []struct {
		id string
	}
	retrieveInstanceDetailsReturns struct {
		result1 brokerstore.ServiceInstance
		result2 error
	}
	RetrieveBindingDetailsStub        func(id string) (brokerapi.BindDetails, error)
	retrieveBindingDetailsMutex       sync.RWMutex
	retrieveBindingDetailsArgsForCall []struct {
		id string
	}
	retrieveBindingDetailsReturns struct {
		result1 brokerapi.BindDetails
		result2 error
	}
	CreateInstanceDetailsStub        func(id string, details brokerstore.ServiceInstance) error
	createInstanceDetailsMutex       sync.RWMutex
	createInstanceDetailsArgsForCall []struct {
		id      string
		details brokerstore.ServiceInstance
	}
	createInstanceDetailsReturns struct {
		result1 error
	}
	CreateBindingDetailsStub        func(id string, details brokerapi.BindDetails) error
	createBindingDetailsMutex       sync.RWMutex
	createBindingDetailsArgsForCall []struct {
		id      string
		details brokerapi.BindDetails
	}
	createBindingDetailsReturns struct {
		result1 error
	}
	DeleteInstanceDetailsStub        func(id string) error
	deleteInstanceDetailsMutex       sync.RWMutex
	deleteInstanceDetailsArgsForCall []struct {
		id string
	}
	deleteInstanceDetailsReturns struct {
		result1 error
	}
	DeleteBindingDetailsStub        func(id string) error
	deleteBindingDetailsMutex       sync.RWMutex
	deleteBindingDetailsArgsForCall []struct {
		id string
	}
	deleteBindingDetailsReturns struct {
		result1 error
	}
	IsInstanceConflictStub        func(id string, details brokerstore.ServiceInstance) bool
	isInstanceConflictMutex       sync.RWMutex
	isInstanceConflictArgsForCall []struct {
		id      string
		details brokerstore.ServiceInstance
	}
	isInstanceConflictReturns struct {
		result1 bool
	}
	IsBindingConflictStub        func(id string, details brokerapi.BindDetails) bool
	isBindingConflictMutex       sync.RWMutex
	isBindingConflictArgsForCall []struct {
		id      string
		details brokerapi.BindDetails
	}
	isBindingConflictReturns struct {
		result1 bool
	}
	RestoreStub        func(logger lager.Logger) error
	restoreMutex       sync.RWMutex
	restoreArgsForCall []struct {
		logger lager.Logger
	}
	restoreReturns struct {
		result1 error
	}
	SaveStub        func(logger lager.Logger) error
	saveMutex       sync.RWMutex
	saveArgsForCall []struct {
		logger lager.Logger
	}
	saveReturns struct {
		result1 error
	}
	CleanupStub        func() error
	cleanupMutex       sync.RWMutex
	cleanupArgsForCall []struct{}
	cleanupReturns     struct {
		result1 error
	}
}

func (fake *FakeStore) RetrieveInstanceDetails(id string) (brokerstore.ServiceInstance, error) {
	fake.retrieveInstanceDetailsMutex.Lock()
	fake.retrieveInstanceDetailsArgsForCall = append(fake.retrieveInstanceDetailsArgsForCall, struct {
		id string
	}{id})
	fake.retrieveInstanceDetailsMutex.Unlock()
	if fake.RetrieveInstanceDetailsStub != nil {
		return fake.RetrieveInstanceDetailsStub(id)
	} else {
		return fake.retrieveInstanceDetailsReturns.result1, fake.retrieveInstanceDetailsReturns.result2
	}
}

func (fake *FakeStore) RetrieveInstanceDetailsCallCount() int {
	fake.retrieveInstanceDetailsMutex.RLock()
	defer fake.retrieveInstanceDetailsMutex.RUnlock()
	return len(fake.retrieveInstanceDetailsArgsForCall)
}

func (fake *FakeStore) RetrieveInstanceDetailsArgsForCall(i int) string {
	fake.retrieveInstanceDetailsMutex.RLock()
	defer fake.retrieveInstanceDetailsMutex.RUnlock()
	return fake.retrieveInstanceDetailsArgsForCall[i].id
}

func (fake *FakeStore) RetrieveInstanceDetailsReturns(result1 brokerstore.ServiceInstance, result2 error) {
	fake.RetrieveInstanceDetailsStub = nil
	fake.retrieveInstanceDetailsReturns = struct {
		result1 brokerstore.ServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) RetrieveBindingDetails(id string) (brokerapi.BindDetails, error) {
	fake.retrieveBindingDetailsMutex.Lock()
	fake.retrieveBindingDetailsArgsForCall = append(fake.retrieveBindingDetailsArgsForCall, struct {
		id string
	}{id})
	fake.retrieveBindingDetailsMutex.Unlock()
	if fake.RetrieveBindingDetailsStub != nil {
		return fake.RetrieveBindingDetailsStub(id)
	} else {
		return fake.retrieveBindingDetailsReturns.result1, fake.retrieveBindingDetailsReturns.result2
	}
}

func (fake *FakeStore) RetrieveBindingDetailsCallCount() int {
	fake.retrieveBindingDetailsMutex.RLock()
	defer fake.retrieveBindingDetailsMutex.RUnlock()
	return len(fake.retrieveBindingDetailsArgsForCall)
}

func (fake *FakeStore) RetrieveBindingDetailsArgsForCall(i int) string {
	fake.retrieveBindingDetailsMutex.RLock()
	defer fake.retrieveBindingDetailsMutex.RUnlock()
	return fake.retrieveBindingDetailsArgsForCall[i].id
}

func (fake *FakeStore) RetrieveBindingDetailsReturns(result1 brokerapi.BindDetails, result2 error) {
	fake.RetrieveBindingDetailsStub = nil
	fake.retrieveBindingDetailsReturns = struct {
		result1 brokerapi.BindDetails
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) CreateInstanceDetails(id string, details brokerstore.ServiceInstance) error {
	fake.createInstanceDetailsMutex.Lock()
	fake.createInstanceDetailsArgsForCall = append(fake.createInstanceDetailsArgsForCall, struct {
		id      string
		details brokerstore.ServiceInstance
	}{id, details})
	fake.createInstanceDetailsMutex.Unlock()
	if fake.CreateInstanceDetailsStub != nil {
		return fake.CreateInstanceDetailsStub(id, details)
	} else {
		return fake.createInstanceDetailsReturns.result1
	}
}

func (fake *FakeStore) CreateInstanceDetailsCallCount() int {
	fake.createInstanceDetailsMutex.RLock()
	defer fake.createInstanceDetailsMutex.RUnlock()
	return len(fake.createInstanceDetailsArgsForCall)
}

func (fake *FakeStore) CreateInstanceDetailsArgsForCall(i int) (string, brokerstore.ServiceInstance) {
	fake.createInstanceDetailsMutex.RLock()
	defer fake.createInstanceDetailsMutex.RUnlock()
	return fake.createInstanceDetailsArgsForCall[i].id, fake.createInstanceDetailsArgsForCall[i].details
}

func (fake *FakeStore) CreateInstanceDetailsReturns(result1 error) {
	fake.CreateInstanceDetailsStub = nil
	fake.createInstanceDetailsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) CreateBindingDetails(id string, details brokerapi.BindDetails) error {
	fake.createBindingDetailsMutex.Lock()
	fake.createBindingDetailsArgsForCall = append(fake.createBindingDetailsArgsForCall, struct {
		id      string
		details brokerapi.BindDetails
	}{id, details})
	fake.createBindingDetailsMutex.Unlock()
	if fake.CreateBindingDetailsStub != nil {
		return fake.CreateBindingDetailsStub(id, details)
	} else {
		return fake.createBindingDetailsReturns.result1
	}
}

func (fake *FakeStore) CreateBindingDetailsCallCount() int {
	fake.createBindingDetailsMutex.RLock()
	defer fake.createBindingDetailsMutex.RUnlock()
	return len(fake.createBindingDetailsArgsForCall)
}

func (fake *FakeStore) CreateBindingDetailsArgsForCall(i int) (string, brokerapi.BindDetails) {
	fake.createBindingDetailsMutex.RLock()
	defer fake.createBindingDetailsMutex.RUnlock()
	return fake.createBindingDetailsArgsForCall[i].id, fake.createBindingDetailsArgsForCall[i].details
}

func (fake *FakeStore) CreateBindingDetailsReturns(result1 error) {
	fake.CreateBindingDetailsStub = nil
	fake.createBindingDetailsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) DeleteInstanceDetails(id string) error {
	fake.deleteInstanceDetailsMutex.Lock()
	fake.deleteInstanceDetailsArgsForCall = append(fake.deleteInstanceDetailsArgsForCall, struct {
		id string
	}{id})
	fake.deleteInstanceDetailsMutex.Unlock()
	if fake.DeleteInstanceDetailsStub != nil {
		return fake.DeleteInstanceDetailsStub(id)
	} else {
		return fake.deleteInstanceDetailsReturns.result1
	}
}

func (fake *FakeStore) DeleteInstanceDetailsCallCount() int {
	fake.deleteInstanceDetailsMutex.RLock()
	defer fake.deleteInstanceDetailsMutex.RUnlock()
	return len(fake.deleteInstanceDetailsArgsForCall)
}

func (fake *FakeStore) DeleteInstanceDetailsArgsForCall(i int) string {
	fake.deleteInstanceDetailsMutex.RLock()
	defer fake.deleteInstanceDetailsMutex.RUnlock()
	return fake.deleteInstanceDetailsArgsForCall[i].id
}

func (fake *FakeStore) DeleteInstanceDetailsReturns(result1 error) {
	fake.DeleteInstanceDetailsStub = nil
	fake.deleteInstanceDetailsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) DeleteBindingDetails(id string) error {
	fake.deleteBindingDetailsMutex.Lock()
	fake.deleteBindingDetailsArgsForCall = append(fake.deleteBindingDetailsArgsForCall, struct {
		id string
	}{id})
	fake.deleteBindingDetailsMutex.Unlock()
	if fake.DeleteBindingDetailsStub != nil {
		return fake.DeleteBindingDetailsStub(id)
	} else {
		return fake.deleteBindingDetailsReturns.result1
	}
}

func (fake *FakeStore) DeleteBindingDetailsCallCount() int {
	fake.deleteBindingDetailsMutex.RLock()
	defer fake.deleteBindingDetailsMutex.RUnlock()
	return len(fake.deleteBindingDetailsArgsForCall)
}

func (fake *FakeStore) DeleteBindingDetailsArgsForCall(i int) string {
	fake.deleteBindingDetailsMutex.RLock()
	defer fake.deleteBindingDetailsMutex.RUnlock()
	return fake.deleteBindingDetailsArgsForCall[i].id
}

func (fake *FakeStore) DeleteBindingDetailsReturns(result1 error) {
	fake.DeleteBindingDetailsStub = nil
	fake.deleteBindingDetailsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) IsInstanceConflict(id string, details brokerstore.ServiceInstance) bool {
	fake.isInstanceConflictMutex.Lock()
	fake.isInstanceConflictArgsForCall = append(fake.isInstanceConflictArgsForCall, struct {
		id      string
		details brokerstore.ServiceInstance
	}{id, details})
	fake.isInstanceConflictMutex.Unlock()
	if fake.IsInstanceConflictStub != nil {
		return fake.IsInstanceConflictStub(id, details)
	} else {
		return fake.isInstanceConflictReturns.result1
	}
}

func (fake *FakeStore) IsInstanceConflictCallCount() int {
	fake.isInstanceConflictMutex.RLock()
	defer fake.isInstanceConflictMutex.RUnlock()
	return len(fake.isInstanceConflictArgsForCall)
}

func (fake *FakeStore) IsInstanceConflictArgsForCall(i int) (string, brokerstore.ServiceInstance) {
	fake.isInstanceConflictMutex.RLock()
	defer fake.isInstanceConflictMutex.RUnlock()
	return fake.isInstanceConflictArgsForCall[i].id, fake.isInstanceConflictArgsForCall[i].details
}

func (fake *FakeStore) IsInstanceConflictReturns(result1 bool) {
	fake.IsInstanceConflictStub = nil
	fake.isInstanceConflictReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeStore) IsBindingConflict(id string, details brokerapi.BindDetails) bool {
	fake.isBindingConflictMutex.Lock()
	fake.isBindingConflictArgsForCall = append(fake.isBindingConflictArgsForCall, struct {
		id      string
		details brokerapi.BindDetails
	}{id, details})
	fake.isBindingConflictMutex.Unlock()
	if fake.IsBindingConflictStub != nil {
		return fake.IsBindingConflictStub(id, details)
	} else {
		return fake.isBindingConflictReturns.result1
	}
}

func (fake *FakeStore) IsBindingConflictCallCount() int {
	fake.isBindingConflictMutex.RLock()
	defer fake.isBindingConflictMutex.RUnlock()
	return len(fake.isBindingConflictArgsForCall)
}

func (fake *FakeStore) IsBindingConflictArgsForCall(i int) (string, brokerapi.BindDetails) {
	fake.isBindingConflictMutex.RLock()
	defer fake.isBindingConflictMutex.RUnlock()
	return fake.isBindingConflictArgsForCall[i].id, fake.isBindingConflictArgsForCall[i].details
}

func (fake *FakeStore) IsBindingConflictReturns(result1 bool) {
	fake.IsBindingConflictStub = nil
	fake.isBindingConflictReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeStore) Restore(logger lager.Logger) error {
	fake.restoreMutex.Lock()
	fake.restoreArgsForCall = append(fake.restoreArgsForCall, struct {
		logger lager.Logger
	}{logger})
	fake.restoreMutex.Unlock()
	if fake.RestoreStub != nil {
		return fake.RestoreStub(logger)
	} else {
		return fake.restoreReturns.result1
	}
}

func (fake *FakeStore) RestoreCallCount() int {
	fake.restoreMutex.RLock()
	defer fake.restoreMutex.RUnlock()
	return len(fake.restoreArgsForCall)
}

func (fake *FakeStore) RestoreArgsForCall(i int) lager.Logger {
	fake.restoreMutex.RLock()
	defer fake.restoreMutex.RUnlock()
	return fake.restoreArgsForCall[i].logger
}

func (fake *FakeStore) RestoreReturns(result1 error) {
	fake.RestoreStub = nil
	fake.restoreReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) Save(logger lager.Logger) error {
	fake.saveMutex.Lock()
	fake.saveArgsForCall = append(fake.saveArgsForCall, struct {
		logger lager.Logger
	}{logger})
	fake.saveMutex.Unlock()
	if fake.SaveStub != nil {
		return fake.SaveStub(logger)
	} else {
		return fake.saveReturns.result1
	}
}

func (fake *FakeStore) SaveCallCount() int {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	return len(fake.saveArgsForCall)
}

func (fake *FakeStore) SaveArgsForCall(i int) lager.Logger {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	return fake.saveArgsForCall[i].logger
}

func (fake *FakeStore) SaveReturns(result1 error) {
	fake.SaveStub = nil
	fake.saveReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) Cleanup() error {
	fake.cleanupMutex.Lock()
	fake.cleanupArgsForCall = append(fake.cleanupArgsForCall, struct{}{})
	fake.cleanupMutex.Unlock()
	if fake.CleanupStub != nil {
		return fake.CleanupStub()
	} else {
		return fake.cleanupReturns.result1
	}
}

func (fake *FakeStore) CleanupCallCount() int {
	fake.cleanupMutex.RLock()
	defer fake.cleanupMutex.RUnlock()
	return len(fake.cleanupArgsForCall)
}

func (fake *FakeStore) CleanupReturns(result1 error) {
	fake.CleanupStub = nil
	fake.cleanupReturns = struct {
		result1 error
	}{result1}
}

var _ brokerstore.Store = new(FakeStore)
